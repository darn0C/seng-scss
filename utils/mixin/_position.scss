/**
 * Position mixin for setting absolute position values
 *
 * The mixin can have multiple arguments providing a number
 * @param {number} $top (0) - Top Position
 * @param {number} $right ($top) - Right Position
 * @param {number} $bottom ($top) - Bottom Position
 * @param {number} $left ($right) - Left Position
 *
 * Or a map of multiple positions
 * @param {map} $args... - A map containing multiple positions (top: 1px, left: 1px)
 */
@mixin position($args...) {
	$argsLength: length($args);

	@if (type-of(nth($args, 1)) == 'map')
	{
		@each $prop, $value in nth($args, 1) {
			#{$prop}: $value;
		}
	}
	@else
	{
		$values: (nth($args, 1), nth($args, 1), nth($args, 1), nth($args, 1));
		@if ($argsLength == 2) {
			$values: (nth($args, 1), nth($args, 2), nth($args, 1), nth($args, 2));
		}
		@else if ($argsLength == 3) {
			$values: (nth($args, 1), nth($args, 2), nth($args, 3), nth($args, 2));
		}
		@else {
			$values: (nth($args, 1), nth($args, 2), nth($args, 3), nth($args, 4));
		}

		@if $useLogicalProperties and $hasLogicalPositionSupport {
			inset-#{get-logical-property(top)}: nth($values, 1);
			inset-#{get-logical-property(right)}: nth($values, 2);
			inset-#{get-logical-property(bottom)}: nth($values, 3);
			inset-#{get-logical-property(left)}: nth($values, 4);
		} @else {
			top: nth($values, 1);
			right: nth($values, 2);
			bottom: nth($values, 3);
			left: nth($values, 4);
		}
	}

}
